#ifndef _GEN_DATA_DEFN_657456364567634435412
	#define _GEN_DATA_DEFN_657456364567634435412

#define	IDC_DATE_HIRED					0x60
#define	IDC_TIME_HIRED					0x61
#define MAX_PDU_BUFF_SIZE				65
#define OUTLET_ID						0
#define OUTLET_NM_ID					1
#define ZERO_ID							0x00
#define PDU_STATIC_WRITE				0x81
#define PDU_STATIC_READ					0x82
#define PDU_CONFIG_WRITE				0x83
#define PDU_CONFIG_READ					0x84

#define MAX_NUM_OUTLETS					50
#define STR_PDU_LOG						_T("PM10_CONFIG_LOG")
#define STR_LOG_FILE_NM					_T("PM10_CONFIG_LOG.INI")
#define STR_CSV_FILE_NM					_T("PM10_CONFIG_DATA.csv")
#define STR_DEVICE_DETECT				_T("DEVICE_DETECTION")
#define STR_DEVICE_HANDLE				_T("DEVICE_HANDLE")
#define STR_DEVICE_PATH					_T("DEVICE_PATH")
#define STR_DEVICE_VID					_T("DEVICE_VID")
#define STR_DEVICE_PID					_T("DEVICE_PID")
#define STR_PID_VID						_T("PID_VID_STATUS")
#define STR_CLOSE_DEV_HAND				_T("DEVICE_HANDLE_CLOSE")
#define STR_INIT_WRITE_CMD				_T("INITIATE_WRITE_CMD")
#define STR_DEV_DATA_WRTN_BYTES			_T("DATA_WRITN_BYTES")
#define STR_DEV_DATA_READ_BYTES			_T("DATA_READ_BYTES")
#define STR_PDU_MDNM_SRNM_SEP			_T(" - ")
#define FACTORY_RESET_FAIL				0
#define FACTORY_RESET_PASS				1
#define STR_DEVICE_IDS					_T("CS_Device_ID.ini")
#define STR_DEVICE_DETAILS				_T("DEVICE_DETAILS")
#define STR_VID_NO						_T("VID_%d")
#define STR_PID_NO						_T("PID_%d")
#define STR_TOTAL						_T("TOTAL")
#define STR_FAIL						_T("FAIL")


typedef enum _POPUP_DLG_TYPEx
{
	DLG_POPUP_CREATE = 0,
	DLG_POPUP_REFRESH,
	DLG_POPUP_DESTROY
} POPUP_DLG_TYPE;

typedef enum _PAGES_IDx
{
	ID_PAGE_NETWORK = 0,
	ID_PAGE_SNMP,
	ID_PAGE_SNMP_VERSION,
	ID_PAGE_EMAIL,
	ID_PAGE_GENERAL,
	ID_PAGE_PDU_SETTING,
	ID_PAGE_ALERT_SETTING
} PAGE_ID_SRC;

typedef enum _COLMN_IDx
{
	PDU_MODEL_NM = 1,
	PDU_SERIAL_NUM,
	PDU_MODEL_NUM,
	PDU_MANUFAC_DATE,
	PDU_HOST_NM,
	PDU_MAC_ADDRS,
	PDU_STAGGER_ON_DELAY,
	PDU_STAGGER_OFF_DELAY,
	PDU_FIRMWARE_VERSION,
	PDU_TOTAL_OUTLETS,
	PDU_TOTAL_BANKS,
	PDU_OUTLETS_PER_BANK,
	PDU_PHASE_INP_CONN_TYPE,
	PDU_NETWORK_ENB_DHCP,
	PDU_NETWORK_IP_ADDRS,
	PDU_NETWORK_SUBNET_MSK,
	PDU_NETWORK_DEF_GATEWAY,
	PDU_NETWORK_PRIM_DNS_ADDRS,
	PDU_NETWORK_SECN_DNS_ADDRS,
	PDU_SNMP_READ_COMMUNITY,
	PDU_SNMP_WRITE_COMMUNITY,
	PDU_SNMP_ENB_SNMP_TRAP,
	PDU_SNMP_RECEVR_IP_ADDRS,
	PDU_SNMP_RECEVR_PORT_NUM,
	PDU_EMAIL_ENB_EMAIL_NOTIFY,
	PDU_EMAIL_SMTP_SERVER_ADDRS,
	PDU_EMAIL_SMTP_PORT_NUM,
	PDU_EMAIL_USER_NAME,
	PDU_EMAIL_PASSWORD,
	PDU_EMAIL_RECEVR_EMAIL_ID,
	PDU_GENERAL_SYSTEM_NAME,
	PDU_GENERAL_SYSTEM_LOCATE,
	PDU_GENERAL_SYSTEM_CONTACT,
	PDU_GET_SET_OUTLET_NAME,
	PDU_ALERT_ENB_VCB,
	PDU_ALERT_VCB_MAX_GRAC_PER,
	PDU_ALERT_VCB_THRES_VALUE,
	PDU_ALERT_ENB_LCA,
	PDU_ALERT_LCA_MAX_GRAC_PER,
	PDU_ALERT_LCA_THRES_VALUE,
	PDU_ALERT_ENB_HCA,
	PDU_ALERT_HCA_MAX_GRAC_PER,
	PDU_ALERT_HCA_THRES_VALUE,
	PDU_FACTORY_RESET,
	PDU_PRODUCT_GROUP,
	PDU_BANK_PHASE_ID,
	PDU_CAPACITY,
	PDU_BANK_CAPACITY,
	PDU_OUTLET_CAPACITY,
	PDU_MONITOR_ONLY,
	PDU_FULL_CONTROL,
	PDU_OUTLET_VOLTAGE,
	PDU_OUTLET_FREQUENCY,
	PDU_SET_DATE_TIME,
	PDU_NTP_SETTINGS,
	PDU_NTP_DATE_TIME,
	PDU_SNMP_V3_SETTINGS,
	PDU_NET_SETTINGS,
	PDU_WRITE_OVER
}COLMN_ID;

#pragma pack(1)
typedef struct PDU_CONFIG_VARBSx
{
	BYTE		byEnbDHCP;									// DHCP Enable Status			NETWORK SETTINGS
	BYTE		byIPField[4];								// IP ADDRESS
	BYTE		bySMField[4];								// SUBNET MASK
	BYTE		byGWField[4];								// DEFAULT GATEWAY
	BYTE		byPDNSField[4];								// PRIMARY DNS
	BYTE		bySDNSField[4];								// SECONDARY DNS
	BYTE		bySNMPReadCmn[8];							// SNMP READ COMMUNITY			SNMP SETTINGS
	BYTE		bySNMPWriteCmn[8];							// SNMP WRITE COMMUNITY
	BYTE		byEnbSNMPTrap;								// SNMP TRAP Enable Status
	BYTE		bySNMPRecevrField[4];						// SNMP RECEIVER IP
	BYTE		bySNMPTrapPortNum;							// SNMP TRAP PORT NUM
	BYTE		byEnbEmailNotify;							// ENABLE EMAIL NOTIFICATION	EMAIL SETTINGS
	BYTE		bySMTPServerAddrs[40];						// SMTP SERVER ADDRESS
	BYTE		bySMTPPortNum[5];							// SMTP PORT NUMBER
	BYTE		byFrmUserName[50];							// FROM EMAIL ADDRESS
	BYTE		byFrmPassword[40];							// FROM EMAIL PASSWORD
	BYTE		byRecevrEmailAddrs[50];						// TO EMAIL ADDRESS
	BYTE		byGeneralSysNm[16];							// SYSTEM NAME					GENERAL SETTINGS
	BYTE		byGeneralSysLoc[32];						// SYSTEM LOCATION
	BYTE		byGeneralSysCont[32];						// SYSTEM CONTACT
	DWORD		dwStaggerOnDelay;							// STAGGER ON DELAY in MILLISECS
	DWORD		dwStaggerOffDelay;							// STAGGER OFF DELAY in MILLISECS
	BYTE		byOutletNm[MAX_NUM_OUTLETS][16];			// 12 OUTLET NAMEs				OUTLET SETTINGS
	BYTE		byEnbAlertVCB[MAX_NUM_OUTLETS];				// ALERT VCB ENABLE STATUS		ALERT SETTINGS
	DWORD		dwVCBMaxGracPer[MAX_NUM_OUTLETS];			// VCB MAX GRACE PERIOD
	float		fVCBThresValue[MAX_NUM_OUTLETS];			// VCB THRESHOLD VALUE
	BYTE		byEnbAlertLCA[MAX_NUM_OUTLETS];				// ALERT LOW CURRENT ENABLE STATUS
	DWORD		dwLCAMaxGracPer[MAX_NUM_OUTLETS];			// LCA MAX GRACE PERIOD
	float		fLCAThresValue[MAX_NUM_OUTLETS];			// LCA THRESHOLD VALUE
	BYTE		byEnbAlertHCA[MAX_NUM_OUTLETS];				// ALERT HIGH CURRENT ENABLE STATUS
	DWORD		dwHCAMaxGracPer[MAX_NUM_OUTLETS];			// HCA MAX GRACE PERIOD
	float		fHCAThresValue[MAX_NUM_OUTLETS];			// HCA THRESHOLD VALUE
	BYTE 		bNtpEnabled;
	float 		fNtpZone;
	BYTE		byTimeZoneDateTime[18];						// TimeZone Date & Time to Set it manually
	BYTE		bySNMPV3_Enabled;
	BYTE		byAuthLevel;
	BYTE		bySNMPV3_UserName[16];
	BYTE		byAuthPassword[16];
	BYTE		byAuthHashType;
	BYTE		byPrivPassword[16];
	BYTE		byPrivType;
	BYTE		byTelnetEnabled;
	BYTE		byHTTPEnabled;
	BYTE		byHTTPSEnabled;

} PDU_CONFIG_INFO, *PPDU_CONFIG_INFO;
#pragma pack()

#pragma pack(1)
typedef struct _NTP_SETTINGx
{
	BYTE 	bEnabled;
	float 	fNtpZone;

}NTP_SETTINGS_INFO, *PNTP_SETTINGS_INFO;
#pragma pack()

#pragma pack(1)
typedef struct x_SNMPV3_SETTINGS
{
	BYTE	byEnabled;
	BYTE	byAuthLevel;
	BYTE	byUserName[16];
	BYTE	byAuthPassword[16];
	BYTE	byAuthHashType;
	BYTE	byPrivPassword[16];
	BYTE	byPrivType;

}SNMPV3_SETTINGS, *PSNMPV3_SETTINGS;

#pragma pack(1)
typedef struct _OUTLET_NUM_ALERT_INFOx
{
	BYTE		byEnbAlertVCB[MAX_NUM_OUTLETS];				// ALERT VCB ENABLE STATUS		ALERT SETTINGS
	DWORD		dwVCBMaxGracPer[MAX_NUM_OUTLETS];			// VCB MAX GRACE PERIOD
	float		fVCBThresValue[MAX_NUM_OUTLETS];			// VCB THRESHOLD VALUE
	BYTE		byEnbAlertLCA[MAX_NUM_OUTLETS];				// ALERT LOW CURRENT ENABLE STATUS
	DWORD		dwLCAMaxGracPer[MAX_NUM_OUTLETS];			// LCA MAX GRACE PERIOD
	float		fLCAThresValue[MAX_NUM_OUTLETS];			// LCA THRESHOLD VALUE
	BYTE		byEnbAlertHCA[MAX_NUM_OUTLETS];				// ALERT HIGH CURRENT ENABLE STATUS
	DWORD		dwHCAMaxGracPer[MAX_NUM_OUTLETS];			// HCA MAX GRACE PERIOD
	float		fHCAThresValue[MAX_NUM_OUTLETS];			// HCA THRESHOLD VALUE

} OUTLET_ALERT_INFO, *POUTLET_ALERT_INFO;
#pragma pack()

#pragma pack(1)
typedef	struct	tagTESTx
{
	DWORD	dwInstance;

} TEST, *PTEST;
#pragma pack()





#endif